--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -26,539 +22,34 @@
 #define AUD_CFG_MM2S_MASK	BIT(15)
 #define AUD_CFG_S2MM_MASK	BIT(31)
 
-#define XLNX_AUD_FS_MULTIPLIER	0x18
-#define XLNX_AUD_PERIOD_CONFIG	0x1C
-#define XLNX_AUD_BUFF_ADDR_LSB	0x20
-#define XLNX_AUD_BUFF_ADDR_MSB	0x24
-#define XLNX_AUD_XFER_COUNT	0x28
-#define XLNX_AUD_CH_STS_START	0x2C
-#define XLNX_BYTES_PER_CH	0x44
-
-#define AUD_STS_IOC_IRQ_MASK	BIT(31)
-#define AUD_STS_CH_STS_MASK	BIT(29)
-#define AUD_CTRL_IOC_IRQ_MASK	BIT(13)
-#define AUD_CTRL_TOUT_IRQ_MASK	BIT(14)
-#define AUD_CTRL_DMA_EN_MASK	BIT(0)
-
-#define CFG_MM2S_CH_MASK	GENMASK(11, 8)
-#define CFG_MM2S_CH_SHIFT	8
-#define CFG_MM2S_XFER_MASK	GENMASK(14, 13)
-#define CFG_MM2S_XFER_SHIFT	13
-#define CFG_MM2S_PKG_MASK	BIT(12)
-
-#define CFG_S2MM_CH_MASK	GENMASK(27, 24)
-#define CFG_S2MM_CH_SHIFT	24
-#define CFG_S2MM_XFER_MASK	GENMASK(30, 29)
-#define CFG_S2MM_XFER_SHIFT	29
-#define CFG_S2MM_PKG_MASK	BIT(28)
-
-#define AUD_CTRL_DATA_WIDTH_SHIFT	16
-#define AUD_CTRL_ACTIVE_CH_SHIFT	19
-#define PERIOD_CFG_PERIODS_SHIFT	16
-
-#define PERIODS_MIN		2
-#define PERIODS_MAX		6
-#define PERIOD_BYTES_MIN	192
-#define PERIOD_BYTES_MAX	(50 * 1024)
-#define XLNX_PARAM_UNKNOWN	0
-
-enum bit_depth {
-	BIT_DEPTH_8,
-	BIT_DEPTH_16,
-	BIT_DEPTH_20,
-	BIT_DEPTH_24,
-	BIT_DEPTH_32,
-};
-
 struct xlnx_pcm_drv_data {
 	void __iomem *mmio;
 	bool s2mm_presence;
 	bool mm2s_presence;
 	int s2mm_irq;
 	int mm2s_irq;
-	struct snd_pcm_substream *play_stream;
-	struct snd_pcm_substream *capture_stream;
-	struct clk *axi_clk;
 };
 
-/*
- * struct xlnx_pcm_stream_param - stream configuration
- * @mmio: base address offset
- * @interleaved: audio channels arrangement in buffer
- * @xfer_mode: data formatting mode during transfer
- * @ch_limit: Maximum channels supported
- * @buffer_size: stream ring buffer size
- */
-struct xlnx_pcm_stream_param {
-	void __iomem *mmio;
-	bool interleaved;
-	u32 xfer_mode;
-	u32 ch_limit;
-	u64 buffer_size;
-};
-
-static const struct snd_pcm_hardware xlnx_pcm_hardware = {
-	.info = SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER |
-		SNDRV_PCM_INFO_BATCH | SNDRV_PCM_INFO_PAUSE |
-		SNDRV_PCM_INFO_RESUME,
-	.formats = SNDRV_PCM_FMTBIT_S8 | SNDRV_PCM_FMTBIT_S16_LE |
-		   SNDRV_PCM_FMTBIT_S24_LE,
-	.channels_min = 2,
-	.channels_max = 2,
-	.rates = SNDRV_PCM_RATE_8000_192000,
-	.rate_min = 8000,
-	.rate_max = 192000,
-	.buffer_bytes_max = PERIODS_MAX * PERIOD_BYTES_MAX,
-	.period_bytes_min = PERIOD_BYTES_MIN,
-	.period_bytes_max = PERIOD_BYTES_MAX,
-	.periods_min = PERIODS_MIN,
-	.periods_max = PERIODS_MAX,
-};
-
-enum {
-	AES_TO_AES,
-	AES_TO_PCM,
-	PCM_TO_PCM,
-	PCM_TO_AES
-};
-
-static void xlnx_parse_aes_params(u32 chsts_reg1_val, u32 chsts_reg2_val,
-				  struct device *dev)
-{
-	u32 padded, srate, bit_depth, status[2];
-
-	if (chsts_reg1_val & IEC958_AES0_PROFESSIONAL) {
-		status[0] = chsts_reg1_val & 0xff;
-		status[1] = (chsts_reg1_val >> 16) & 0xff;
-
-		switch (status[0] & IEC958_AES0_PRO_FS) {
-		case IEC958_AES0_PRO_FS_44100:
-			srate = 44100;
-			break;
-		case IEC958_AES0_PRO_FS_48000:
-			srate = 48000;
-			break;
-		case IEC958_AES0_PRO_FS_32000:
-			srate = 32000;
-			break;
-		case IEC958_AES0_PRO_FS_NOTID:
-		default:
-			srate = XLNX_PARAM_UNKNOWN;
-			break;
-		}
-
-		switch (status[1] & IEC958_AES2_PRO_SBITS) {
-		case IEC958_AES2_PRO_WORDLEN_NOTID:
-		case IEC958_AES2_PRO_SBITS_20:
-			padded = 0;
-			break;
-		case IEC958_AES2_PRO_SBITS_24:
-			padded = 4;
-			break;
-		default:
-			bit_depth = XLNX_PARAM_UNKNOWN;
-			goto log_params;
-		}
-
-		switch (status[1] & IEC958_AES2_PRO_WORDLEN) {
-		case IEC958_AES2_PRO_WORDLEN_20_16:
-			bit_depth = 16 + padded;
-			break;
-		case IEC958_AES2_PRO_WORDLEN_22_18:
-			bit_depth = 18 + padded;
-			break;
-		case IEC958_AES2_PRO_WORDLEN_23_19:
-			bit_depth = 19 + padded;
-			break;
-		case IEC958_AES2_PRO_WORDLEN_24_20:
-			bit_depth = 20 + padded;
-			break;
-		case IEC958_AES2_PRO_WORDLEN_NOTID:
-		default:
-			bit_depth = XLNX_PARAM_UNKNOWN;
-			break;
-		}
-
-	} else {
-		status[0] = (chsts_reg1_val >> 24) & 0xff;
-		status[1] = chsts_reg2_val & 0xff;
-
-		switch (status[0] & IEC958_AES3_CON_FS) {
-		case IEC958_AES3_CON_FS_44100:
-			srate = 44100;
-			break;
-		case IEC958_AES3_CON_FS_48000:
-			srate = 48000;
-			break;
-		case IEC958_AES3_CON_FS_32000:
-			srate = 32000;
-			break;
-		default:
-			srate = XLNX_PARAM_UNKNOWN;
-			break;
-		}
-
-		if (status[1] & IEC958_AES4_CON_MAX_WORDLEN_24)
-			padded = 4;
-		else
-			padded = 0;
-
-		switch (status[1] & IEC958_AES4_CON_WORDLEN) {
-		case IEC958_AES4_CON_WORDLEN_20_16:
-			bit_depth = 16 + padded;
-			break;
-		case IEC958_AES4_CON_WORDLEN_22_18:
-			bit_depth = 18 + padded;
-			break;
-		case IEC958_AES4_CON_WORDLEN_23_19:
-			bit_depth = 19 + padded;
-			break;
-		case IEC958_AES4_CON_WORDLEN_24_20:
-			bit_depth = 20 + padded;
-			break;
-		case IEC958_AES4_CON_WORDLEN_21_17:
-			bit_depth = 17 + padded;
-			break;
-		case IEC958_AES4_CON_WORDLEN_NOTID:
-		default:
-			bit_depth = XLNX_PARAM_UNKNOWN;
-			break;
-		}
-	}
-
-log_params:
-	if (srate != XLNX_PARAM_UNKNOWN)
-		dev_info(dev, "sample rate = %d\n", srate);
-	else
-		dev_info(dev, "sample rate = unknown\n");
-
-	if (bit_depth != XLNX_PARAM_UNKNOWN)
-		dev_info(dev, "bit_depth = %d\n", bit_depth);
-	else
-		dev_info(dev, "bit_depth = unknown\n");
-}
-
-static int xlnx_formatter_pcm_reset(void __iomem *mmio_base)
-{
-	u32 val, retries = 0;
-
-	val = readl(mmio_base + XLNX_AUD_CTRL);
-	val |= AUD_CTRL_RESET_MASK;
-	writel(val, mmio_base + XLNX_AUD_CTRL);
-
-	val = readl(mmio_base + XLNX_AUD_CTRL);
-	/* Poll for maximum timeout of approximately 100ms (1 * 100)*/
-	while ((val & AUD_CTRL_RESET_MASK) && (retries < 100)) {
-		mdelay(1);
-		retries++;
-		val = readl(mmio_base + XLNX_AUD_CTRL);
-	}
-	if (val & AUD_CTRL_RESET_MASK)
-		return -ENODEV;
-
-	return 0;
-}
-
-static void xlnx_formatter_disable_irqs(void __iomem *mmio_base, int stream)
+void xlnx_formatter_pcm_reset(void __iomem *mmio_base)
 {
 	u32 val;
 
 	val = readl(mmio_base + XLNX_AUD_CTRL);
-	val &= ~AUD_CTRL_IOC_IRQ_MASK;
-	if (stream == SNDRV_PCM_STREAM_CAPTURE)
-		val &= ~AUD_CTRL_TOUT_IRQ_MASK;
-
+	val |= AUD_CTRL_RESET_MASK;
 	writel(val, mmio_base + XLNX_AUD_CTRL);
 }
 
-static irqreturn_t xlnx_mm2s_irq_handler(int irq, void *arg)
-{
-	u32 val;
-	void __iomem *reg;
-	struct device *dev = arg;
-	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(dev);
-
-	reg = adata->mmio + XLNX_MM2S_OFFSET + XLNX_AUD_STS;
-	val = readl(reg);
-	if (val & AUD_STS_IOC_IRQ_MASK) {
-		writel(val & AUD_STS_IOC_IRQ_MASK, reg);
-		if (adata->play_stream)
-			snd_pcm_period_elapsed(adata->play_stream);
-		return IRQ_HANDLED;
-	}
-
-	return IRQ_NONE;
-}
-
-static irqreturn_t xlnx_s2mm_irq_handler(int irq, void *arg)
-{
-	u32 val;
-	void __iomem *reg;
-	struct device *dev = arg;
-	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(dev);
-
-	reg = adata->mmio + XLNX_S2MM_OFFSET + XLNX_AUD_STS;
-	val = readl(reg);
-	if (val & AUD_STS_IOC_IRQ_MASK) {
-		writel(val & AUD_STS_IOC_IRQ_MASK, reg);
-		if (adata->capture_stream)
-			snd_pcm_period_elapsed(adata->capture_stream);
-		return IRQ_HANDLED;
-	}
-
-	return IRQ_NONE;
-}
-
-static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
-				   struct snd_pcm_substream *substream)
-{
-	int err;
-	u32 val, data_format_mode;
-	u32 ch_count_mask, ch_count_shift, data_xfer_mode, data_xfer_shift;
-	struct xlnx_pcm_stream_param *stream_data;
-	struct snd_pcm_runtime *runtime = substream->runtime;
-	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(component->dev);
-
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK &&
-	    !adata->mm2s_presence)
-		return -ENODEV;
-	else if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
-		 !adata->s2mm_presence)
-		return -ENODEV;
-
-	stream_data = kzalloc(sizeof(*stream_data), GFP_KERNEL);
-	if (!stream_data)
-		return -ENOMEM;
-
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-		ch_count_mask = CFG_MM2S_CH_MASK;
-		ch_count_shift = CFG_MM2S_CH_SHIFT;
-		data_xfer_mode = CFG_MM2S_XFER_MASK;
-		data_xfer_shift = CFG_MM2S_XFER_SHIFT;
-		data_format_mode = CFG_MM2S_PKG_MASK;
-		stream_data->mmio = adata->mmio + XLNX_MM2S_OFFSET;
-		adata->play_stream = substream;
-
-	} else {
-		ch_count_mask = CFG_S2MM_CH_MASK;
-		ch_count_shift = CFG_S2MM_CH_SHIFT;
-		data_xfer_mode = CFG_S2MM_XFER_MASK;
-		data_xfer_shift = CFG_S2MM_XFER_SHIFT;
-		data_format_mode = CFG_S2MM_PKG_MASK;
-		stream_data->mmio = adata->mmio + XLNX_S2MM_OFFSET;
-		adata->capture_stream = substream;
-	}
-
-	val = readl(adata->mmio + XLNX_AUD_CORE_CONFIG);
-
-	if (!(val & data_format_mode))
-		stream_data->interleaved = true;
-
-	stream_data->xfer_mode = (val & data_xfer_mode) >> data_xfer_shift;
-	stream_data->ch_limit = (val & ch_count_mask) >> ch_count_shift;
-	dev_info(component->dev,
-		 "stream %d : format = %d mode = %d ch_limit = %d\n",
-		 substream->stream, stream_data->interleaved,
-		 stream_data->xfer_mode, stream_data->ch_limit);
-
-	snd_soc_set_runtime_hwparams(substream, &xlnx_pcm_hardware);
-	runtime->private_data = stream_data;
-
-	/* Resize the period size divisible by 64 */
-	err = snd_pcm_hw_constraint_step(runtime, 0,
-					 SNDRV_PCM_HW_PARAM_PERIOD_BYTES, 64);
-	if (err) {
-		dev_err(component->dev,
-			"unable to set constraint on period bytes\n");
-		return err;
-	}
-
-	/* enable DMA IOC irq */
-	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
-	val |= AUD_CTRL_IOC_IRQ_MASK;
-	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
-
-	return 0;
-}
-
-static int xlnx_formatter_pcm_close(struct snd_soc_component *component,
-				    struct snd_pcm_substream *substream)
-{
-	int ret;
-	struct xlnx_pcm_stream_param *stream_data =
-			substream->runtime->private_data;
-
-	ret = xlnx_formatter_pcm_reset(stream_data->mmio);
-	if (ret) {
-		dev_err(component->dev, "audio formatter reset failed\n");
-		goto err_reset;
-	}
-	xlnx_formatter_disable_irqs(stream_data->mmio, substream->stream);
-
-err_reset:
-	kfree(stream_data);
-	return 0;
-}
-
-static snd_pcm_uframes_t
-xlnx_formatter_pcm_pointer(struct snd_soc_component *component,
-			   struct snd_pcm_substream *substream)
-{
-	u32 pos;
-	struct snd_pcm_runtime *runtime = substream->runtime;
-	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
-
-	pos = readl(stream_data->mmio + XLNX_AUD_XFER_COUNT);
-
-	if (pos >= stream_data->buffer_size)
-		pos = 0;
-
-	return bytes_to_frames(runtime, pos);
-}
-
-static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
-					struct snd_pcm_substream *substream,
-					struct snd_pcm_hw_params *params)
-{
-	u32 low, high, active_ch, val, bytes_per_ch, bits_per_sample;
-	u32 aes_reg1_val, aes_reg2_val;
-	u64 size;
-	struct snd_pcm_runtime *runtime = substream->runtime;
-	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
-
-	active_ch = params_channels(params);
-	if (active_ch > stream_data->ch_limit)
-		return -EINVAL;
-
-	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
-	    stream_data->xfer_mode == AES_TO_PCM) {
-		val = readl(stream_data->mmio + XLNX_AUD_STS);
-		if (val & AUD_STS_CH_STS_MASK) {
-			aes_reg1_val = readl(stream_data->mmio +
-					     XLNX_AUD_CH_STS_START);
-			aes_reg2_val = readl(stream_data->mmio +
-					     XLNX_AUD_CH_STS_START + 0x4);
-
-			xlnx_parse_aes_params(aes_reg1_val, aes_reg2_val,
-					      component->dev);
-		}
-	}
-
-	size = params_buffer_bytes(params);
-
-	stream_data->buffer_size = size;
-
-	low = lower_32_bits(substream->dma_buffer.addr);
-	high = upper_32_bits(substream->dma_buffer.addr);
-	writel(low, stream_data->mmio + XLNX_AUD_BUFF_ADDR_LSB);
-	writel(high, stream_data->mmio + XLNX_AUD_BUFF_ADDR_MSB);
-
-	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
-	bits_per_sample = params_width(params);
-	switch (bits_per_sample) {
-	case 8:
-		val |= (BIT_DEPTH_8 << AUD_CTRL_DATA_WIDTH_SHIFT);
-		break;
-	case 16:
-		val |= (BIT_DEPTH_16 << AUD_CTRL_DATA_WIDTH_SHIFT);
-		break;
-	case 20:
-		val |= (BIT_DEPTH_20 << AUD_CTRL_DATA_WIDTH_SHIFT);
-		break;
-	case 24:
-		val |= (BIT_DEPTH_24 << AUD_CTRL_DATA_WIDTH_SHIFT);
-		break;
-	case 32:
-		val |= (BIT_DEPTH_32 << AUD_CTRL_DATA_WIDTH_SHIFT);
-		break;
-	default:
-		return -EINVAL;
-	}
-
-	val |= active_ch << AUD_CTRL_ACTIVE_CH_SHIFT;
-	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
-
-	val = (params_periods(params) << PERIOD_CFG_PERIODS_SHIFT)
-		| params_period_bytes(params);
-	writel(val, stream_data->mmio + XLNX_AUD_PERIOD_CONFIG);
-	bytes_per_ch = DIV_ROUND_UP(params_period_bytes(params), active_ch);
-	writel(bytes_per_ch, stream_data->mmio + XLNX_BYTES_PER_CH);
-
-	return 0;
-}
-
-static int xlnx_formatter_pcm_trigger(struct snd_soc_component *component,
-				      struct snd_pcm_substream *substream,
-				      int cmd)
-{
-	u32 val;
-	struct xlnx_pcm_stream_param *stream_data =
-			substream->runtime->private_data;
-
-	switch (cmd) {
-	case SNDRV_PCM_TRIGGER_START:
-	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-	case SNDRV_PCM_TRIGGER_RESUME:
-		val = readl(stream_data->mmio + XLNX_AUD_CTRL);
-		val |= AUD_CTRL_DMA_EN_MASK;
-		writel(val, stream_data->mmio + XLNX_AUD_CTRL);
-		break;
-	case SNDRV_PCM_TRIGGER_STOP:
-	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
-	case SNDRV_PCM_TRIGGER_SUSPEND:
-		val = readl(stream_data->mmio + XLNX_AUD_CTRL);
-		val &= ~AUD_CTRL_DMA_EN_MASK;
-		writel(val, stream_data->mmio + XLNX_AUD_CTRL);
-		break;
-	}
-
-	return 0;
-}
-
-static int xlnx_formatter_pcm_new(struct snd_soc_component *component,
-				  struct snd_soc_pcm_runtime *rtd)
-{
-	snd_pcm_set_managed_buffer_all(rtd->pcm,
-			SNDRV_DMA_TYPE_DEV, component->dev,
-			xlnx_pcm_hardware.buffer_bytes_max,
-			xlnx_pcm_hardware.buffer_bytes_max);
-	return 0;
-}
-
-static const struct snd_soc_component_driver xlnx_asoc_component = {
-	.name		= DRV_NAME,
-	.open		= xlnx_formatter_pcm_open,
-	.close		= xlnx_formatter_pcm_close,
-	.hw_params	= xlnx_formatter_pcm_hw_params,
-	.trigger	= xlnx_formatter_pcm_trigger,
-	.pointer	= xlnx_formatter_pcm_pointer,
-	.pcm_construct	= xlnx_formatter_pcm_new,
-};
-
 static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 {
-	int ret;
+	int ret = 0;
 	u32 val;
 	struct xlnx_pcm_drv_data *aud_drv_data;
-	struct device *dev = &pdev->dev;
 
-	aud_drv_data = devm_kzalloc(dev, sizeof(*aud_drv_data), GFP_KERNEL);
+	aud_drv_data = devm_kzalloc(&pdev->dev,
+				    sizeof(*aud_drv_data), GFP_KERNEL);
 	if (!aud_drv_data)
 		return -ENOMEM;
 
-	aud_drv_data->axi_clk = devm_clk_get(dev, "s_axi_lite_aclk");
-	if (IS_ERR(aud_drv_data->axi_clk)) {
-		ret = PTR_ERR(aud_drv_data->axi_clk);
-		dev_err(dev, "failed to get s_axi_lite_aclk(%d)\n", ret);
-		return ret;
-	}
-	ret = clk_prepare_enable(aud_drv_data->axi_clk);
-	if (ret) {
-		dev_err(dev,
-			"failed to enable s_axi_lite_aclk(%d)\n", ret);
-		return ret;
-	}
-
 	aud_drv_data->mmio = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(aud_drv_data->mmio)) {
 		dev_err(dev, "audio formatter ioremap failed\n");
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -29,12 +32,88 @@
 #define AUD_CFG_MM2S_MASK	BIT(15)
 #define AUD_CFG_S2MM_MASK	BIT(31)
 
+#define XLNX_AUD_FS_MULTIPLIER	0x18
+#define XLNX_AUD_PERIOD_CONFIG	0x1C
+#define XLNX_AUD_BUFF_ADDR_LSB	0x20
+#define XLNX_AUD_BUFF_ADDR_MSB	0x24
+#define XLNX_AUD_XFER_COUNT	0x28
+#define XLNX_AUD_CH_STS_START	0x2C
+#define XLNX_BYTES_PER_CH	0x44
+
+#define AUD_STS_IOC_IRQ_MASK	BIT(31)
+#define AUD_CTRL_IOC_IRQ_MASK	BIT(13)
+#define AUD_CTRL_DMA_EN_MASK	BIT(0)
+
+#define CFG_MM2S_CH_MASK	GENMASK(11, 8)
+#define CFG_MM2S_CH_SHIFT	8
+#define CFG_MM2S_FORMAT_MASK	GENMASK(14, 13)
+#define CGG_MM2S_FORMAT_SHIFT	13
+#define CGG_MM2S_PKG_MASK	BIT(12)
+
+#define CFG_S2MM_CH_MASK	GENMASK(27, 24)
+#define CFG_S2MM_CH_SHIFT	24
+#define CFG_S2MM_FORMAT_MASK	GENMASK(30, 29)
+#define CGG_S2MM_FORMAT_SHIFT	29
+#define CGG_S2MM_PKG_MASK	BIT(28)
+
+#define AUD_CTRL_DATA_WIDTH_SHIFT	16
+#define AUD_CTRL_ACTIVE_CH_SHIFT	19
+#define PERIOD_CFG_PERIODS_SHIFT	16
+
+#define PERIODS_MIN		2
+#define PERIODS_MAX		6
+#define PERIOD_BYTES_MIN	192
+#define PERIOD_BYTES_MAX	(50 * 1024)
+
+static const struct snd_pcm_hardware xlnx_pcm_hardware = {
+	.info = SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER |
+		SNDRV_PCM_INFO_BATCH | SNDRV_PCM_INFO_PAUSE |
+		SNDRV_PCM_INFO_RESUME,
+	.formats = SNDRV_PCM_FMTBIT_S24_LE,
+	.channels_min = 2,
+	.channels_max = 2,
+	.rates = SNDRV_PCM_RATE_8000_192000,
+	.rate_min = 8000,
+	.rate_max = 192000,
+	.buffer_bytes_max = PERIODS_MAX * PERIOD_BYTES_MAX,
+	.period_bytes_min = PERIOD_BYTES_MIN,
+	.period_bytes_max = PERIOD_BYTES_MAX,
+	.periods_min = PERIODS_MIN,
+	.periods_max = PERIODS_MAX,
+};
+
 struct xlnx_pcm_drv_data {
 	void __iomem *mmio;
 	bool s2mm_presence;
 	bool mm2s_presence;
 	int s2mm_irq;
 	int mm2s_irq;
+	struct snd_pcm_substream *play_stream;
+	struct snd_pcm_substream *capture_stream;
+};
+
+/*
+ * struct xlnx_pcm_stream_param - stream configuration
+ * @mmio: base address offset
+ * @interleaved: audio channels arrangement in buffer
+ * @xfer_mode: data formatting mode during transfer
+ * @ch_limit: Maximum channels supported
+ * @buffer_size: stream ring buffer size
+ */
+struct xlnx_pcm_stream_param {
+	void __iomem *mmio;
+	bool interleaved;
+	u32 xfer_mode;
+	u32 ch_limit;
+	u64 buffer_size;
+};
+
+enum bit_depth {
+	BIT_DEPTH_8,
+	BIT_DEPTH_16,
+	BIT_DEPTH_20,
+	BIT_DEPTH_24,
+	BIT_DEPTH_32,
 };
 
 void xlnx_formatter_pcm_reset(void __iomem *mmio_base)
@@ -46,9 +125,257 @@ void xlnx_formatter_pcm_reset(void __iomem *mmio_base)
 	writel(val, mmio_base + XLNX_AUD_CTRL);
 }
 
+static irqreturn_t xlnx_mm2s_irq_handler(int irq, void *arg)
+{
+	u32 val;
+	void __iomem *reg;
+	struct device *dev = arg;
+	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(dev);
+
+	reg = adata->mmio + XLNX_MM2S_OFFSET + XLNX_AUD_STS;
+	val = readl(reg);
+	if (val & AUD_STS_IOC_IRQ_MASK) {
+		writel(val & AUD_STS_IOC_IRQ_MASK, reg);
+		if (adata->play_stream)
+			snd_pcm_period_elapsed(adata->play_stream);
+		return IRQ_HANDLED;
+	}
+
+	return IRQ_NONE;
+}
+
+static irqreturn_t xlnx_s2mm_irq_handler(int irq, void *arg)
+{
+	u32 val;
+	void __iomem *reg;
+	struct device *dev = arg;
+	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(dev);
+
+	reg = adata->mmio + XLNX_S2MM_OFFSET + XLNX_AUD_STS;
+	val = readl(reg);
+	if (val & AUD_STS_IOC_IRQ_MASK) {
+		writel(val & AUD_STS_IOC_IRQ_MASK, reg);
+		if (adata->capture_stream)
+			snd_pcm_period_elapsed(adata->capture_stream);
+		return IRQ_HANDLED;
+	}
+
+	return IRQ_NONE;
+}
+
+static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
+			       struct snd_pcm_substream *substream)
+{
+	u32 val, data_format_mode;
+	u32 ch_count_mask, ch_count_shift, data_xfer_mode, data_xfer_shift;
+	struct xlnx_pcm_stream_param *stream_data;
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(component->dev);
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK &&
+	    !adata->mm2s_presence)
+		return -ENODEV;
+	else if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
+		 !adata->s2mm_presence)
+		return -ENODEV;
+
+	stream_data = kzalloc(sizeof(*stream_data), GFP_KERNEL);
+	if (!stream_data)
+		return -ENOMEM;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		ch_count_mask = CFG_MM2S_CH_MASK;
+		ch_count_shift = CFG_MM2S_CH_SHIFT;
+		data_format_mode = CFG_MM2S_FORMAT_MASK;
+		data_xfer_mode = CGG_MM2S_FORMAT_SHIFT;
+		data_xfer_shift = CGG_MM2S_PKG_MASK;
+		stream_data->mmio = adata->mmio + XLNX_MM2S_OFFSET;
+		adata->play_stream = substream;
+
+	} else {
+		ch_count_mask = CFG_S2MM_CH_MASK;
+		ch_count_shift = CFG_S2MM_CH_SHIFT;
+		data_format_mode = CFG_S2MM_FORMAT_MASK;
+		data_xfer_mode = CGG_S2MM_FORMAT_SHIFT;
+		data_xfer_shift = CGG_S2MM_PKG_MASK;
+		stream_data->mmio = adata->mmio + XLNX_S2MM_OFFSET;
+		adata->capture_stream = substream;
+	}
+
+	val = readl(adata->mmio + XLNX_AUD_CORE_CONFIG);
+
+	if (!(val & data_format_mode))
+		stream_data->interleaved = true;
+
+	stream_data->xfer_mode = (val & data_xfer_mode) >> data_xfer_shift;
+	stream_data->ch_limit = (val & ch_count_mask) >> ch_count_shift;
+	dev_info(component->dev,
+		 "stream %d : format = %d mode = %d ch_limit = %d\n",
+		 substream->stream, stream_data->interleaved,
+		 stream_data->xfer_mode, stream_data->ch_limit);
+
+	snd_soc_set_runtime_hwparams(substream, &xlnx_pcm_hardware);
+	runtime->private_data = stream_data;
+
+	/* enable interrupt on complete */
+	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
+	val |= AUD_CTRL_IOC_IRQ_MASK;
+	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
+
+	return 0;
+}
+
+static int xlnx_formatter_pcm_close(struct snd_soc_component *component,
+			       struct snd_pcm_substream *substream)
+{
+	u32 val;
+
+	struct xlnx_pcm_stream_param *stream_data =
+			substream->runtime->private_data;
+
+	/* disable interrupt on complete */
+	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
+	val &= ~AUD_CTRL_IOC_IRQ_MASK;
+	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
+
+	kfree(stream_data);
+
+	return 0;
+}
+
+static snd_pcm_uframes_t
+xlnx_formatter_pcm_pointer(struct snd_soc_component *component,
+					struct snd_pcm_substream *substream)
+{
+	u32 pos;
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
+
+	pos = readl(stream_data->mmio + XLNX_AUD_XFER_COUNT);
+
+	if (pos >= stream_data->buffer_size)
+		pos = 0;
+
+	return bytes_to_frames(runtime, pos);
+}
+
+static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
+					struct snd_pcm_substream *substream,
+					struct snd_pcm_hw_params *params)
+{
+	u32 low, high, active_ch, val, bits_per_sample, bytes_per_ch;
+	int status;
+	u64 size;
+	struct snd_pcm_runtime *runtime = substream->runtime;
+	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
+
+	active_ch = params_channels(params);
+	if (active_ch > stream_data->ch_limit)
+		return -EINVAL;
+
+	size = params_buffer_bytes(params);
+	status = snd_pcm_lib_malloc_pages(substream, size);
+	if (status < 0)
+		return status;
+
+	stream_data->buffer_size = size;
+
+	low = lower_32_bits(substream->dma_buffer.addr);
+	high = upper_32_bits(substream->dma_buffer.addr);
+	writel(low, stream_data->mmio + XLNX_AUD_BUFF_ADDR_LSB);
+	writel(high, stream_data->mmio + XLNX_AUD_BUFF_ADDR_MSB);
+
+	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
+	bits_per_sample = params_width(params);
+	switch (bits_per_sample) {
+	case 8:
+		val |= (BIT_DEPTH_8 << AUD_CTRL_DATA_WIDTH_SHIFT);
+		break;
+	case 16:
+		val |= (BIT_DEPTH_16 << AUD_CTRL_DATA_WIDTH_SHIFT);
+		break;
+	case 20:
+		val |= (BIT_DEPTH_20 << AUD_CTRL_DATA_WIDTH_SHIFT);
+		break;
+	case 24:
+		val |= (BIT_DEPTH_24 << AUD_CTRL_DATA_WIDTH_SHIFT);
+		break;
+	case 32:
+		val |= (BIT_DEPTH_32 << AUD_CTRL_DATA_WIDTH_SHIFT);
+		break;
+	}
+
+	val |= active_ch << AUD_CTRL_ACTIVE_CH_SHIFT;
+	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
+
+	val = (params_periods(params) << PERIOD_CFG_PERIODS_SHIFT)
+		| params_period_bytes(params);
+	writel(val, stream_data->mmio + XLNX_AUD_PERIOD_CONFIG);
+	bytes_per_ch = DIV_ROUND_UP(params_period_bytes(params), active_ch);
+	writel(bytes_per_ch, stream_data->mmio + XLNX_BYTES_PER_CH);
+
+	return 0;
+}
+
+static int xlnx_formatter_pcm_hw_free(struct snd_soc_component *component,
+					struct snd_pcm_substream *substream)
+{
+	return snd_pcm_lib_free_pages(substream);
+}
+
+static int xlnx_formatter_pcm_trigger(struct snd_soc_component *component,
+					struct snd_pcm_substream *substream, int cmd)
+{
+	u32 val;
+	struct xlnx_pcm_stream_param *stream_data =
+			substream->runtime->private_data;
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+	case SNDRV_PCM_TRIGGER_RESUME:
+		val = readl(stream_data->mmio + XLNX_AUD_CTRL);
+		val |= AUD_CTRL_DMA_EN_MASK;
+		writel(val, stream_data->mmio + XLNX_AUD_CTRL);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+		val = readl(stream_data->mmio + XLNX_AUD_CTRL);
+		val &= ~AUD_CTRL_DMA_EN_MASK;
+		writel(val, stream_data->mmio + XLNX_AUD_CTRL);
+		break;
+	}
+
+	return 0;
+}
+
+static int xlnx_formatter_pcm_new(struct snd_soc_component *component,
+					struct snd_soc_pcm_runtime *rtd)
+{
+	struct snd_card *card = rtd->card->snd_card;
+
+	snd_pcm_lib_preallocate_pages_for_all(rtd->pcm,
+			SNDRV_DMA_TYPE_DEV, card->dev,
+			xlnx_pcm_hardware.buffer_bytes_max,
+			xlnx_pcm_hardware.buffer_bytes_max);
+	return 0;
+}
+
+static struct snd_soc_component_driver xlnx_asoc_component = {
+	.name = DRV_NAME,
+	.open = xlnx_formatter_pcm_open,
+	.close = xlnx_formatter_pcm_close,
+	.hw_params = xlnx_formatter_pcm_hw_params,
+	.hw_free = xlnx_formatter_pcm_hw_free,
+	.trigger = xlnx_formatter_pcm_trigger,
+	.pointer = xlnx_formatter_pcm_pointer,
+	.pcm_construct = xlnx_formatter_pcm_new,
+};
+
 static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 {
-	int ret = 0;
+	int ret;
 	u32 val;
 	struct xlnx_pcm_drv_data *aud_drv_data;
 
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -89,6 +91,7 @@ struct xlnx_pcm_drv_data {
 	int mm2s_irq;
 	struct snd_pcm_substream *play_stream;
 	struct snd_pcm_substream *capture_stream;
+	struct platform_device *pdev;
 };
 
 /*
@@ -352,10 +355,8 @@ static int xlnx_formatter_pcm_trigger(struct snd_soc_component *component,
 static int xlnx_formatter_pcm_new(struct snd_soc_component *component,
 					struct snd_soc_pcm_runtime *rtd)
 {
-	struct snd_card *card = rtd->card->snd_card;
-
 	snd_pcm_lib_preallocate_pages_for_all(rtd->pcm,
-			SNDRV_DMA_TYPE_DEV, card->dev,
+			SNDRV_DMA_TYPE_DEV, component->dev,
 			xlnx_pcm_hardware.buffer_bytes_max,
 			xlnx_pcm_hardware.buffer_bytes_max);
 	return 0;
@@ -377,6 +378,8 @@ static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 	int ret;
 	u32 val;
 	struct xlnx_pcm_drv_data *aud_drv_data;
+	struct device_node *nodes[XLNX_MAX_PATHS];
+	struct device *dev = &pdev->dev;
 
 	aud_drv_data = devm_kzalloc(&pdev->dev,
 				    sizeof(*aud_drv_data), GFP_KERNEL);
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -68,7 +68,8 @@ static const struct snd_pcm_hardware xlnx_pcm_hardware = {
 	.info = SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER |
 		SNDRV_PCM_INFO_BATCH | SNDRV_PCM_INFO_PAUSE |
 		SNDRV_PCM_INFO_RESUME,
-	.formats = SNDRV_PCM_FMTBIT_S24_LE,
+	.formats = SNDRV_PCM_FMTBIT_S8 | SNDRV_PCM_FMTBIT_S16_LE |
+		   SNDRV_PCM_FMTBIT_S24_LE,
 	.channels_min = 2,
 	.channels_max = 2,
 	.rates = SNDRV_PCM_RATE_8000_192000,
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -45,15 +45,15 @@
 
 #define CFG_MM2S_CH_MASK	GENMASK(11, 8)
 #define CFG_MM2S_CH_SHIFT	8
-#define CFG_MM2S_FORMAT_MASK	GENMASK(14, 13)
-#define CGG_MM2S_FORMAT_SHIFT	13
-#define CGG_MM2S_PKG_MASK	BIT(12)
+#define CFG_MM2S_XFER_MASK	GENMASK(14, 13)
+#define CFG_MM2S_XFER_SHIFT	13
+#define CFG_MM2S_PKG_MASK	BIT(12)
 
 #define CFG_S2MM_CH_MASK	GENMASK(27, 24)
 #define CFG_S2MM_CH_SHIFT	24
-#define CFG_S2MM_FORMAT_MASK	GENMASK(30, 29)
-#define CGG_S2MM_FORMAT_SHIFT	29
-#define CGG_S2MM_PKG_MASK	BIT(28)
+#define CFG_S2MM_XFER_MASK	GENMASK(30, 29)
+#define CFG_S2MM_XFER_SHIFT	29
+#define CFG_S2MM_PKG_MASK	BIT(28)
 
 #define AUD_CTRL_DATA_WIDTH_SHIFT	16
 #define AUD_CTRL_ACTIVE_CH_SHIFT	19
@@ -187,18 +187,18 @@ static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		ch_count_mask = CFG_MM2S_CH_MASK;
 		ch_count_shift = CFG_MM2S_CH_SHIFT;
-		data_format_mode = CFG_MM2S_FORMAT_MASK;
-		data_xfer_mode = CGG_MM2S_FORMAT_SHIFT;
-		data_xfer_shift = CGG_MM2S_PKG_MASK;
+		data_xfer_mode = CFG_MM2S_XFER_MASK;
+		data_xfer_shift = CFG_MM2S_XFER_SHIFT;
+		data_format_mode = CFG_MM2S_PKG_MASK;
 		stream_data->mmio = adata->mmio + XLNX_MM2S_OFFSET;
 		adata->play_stream = substream;
 
 	} else {
 		ch_count_mask = CFG_S2MM_CH_MASK;
 		ch_count_shift = CFG_S2MM_CH_SHIFT;
-		data_format_mode = CFG_S2MM_FORMAT_MASK;
-		data_xfer_mode = CGG_S2MM_FORMAT_SHIFT;
-		data_xfer_shift = CGG_S2MM_PKG_MASK;
+		data_xfer_mode = CFG_S2MM_XFER_MASK;
+		data_xfer_shift = CFG_S2MM_XFER_SHIFT;
+		data_format_mode = CFG_S2MM_PKG_MASK;
 		stream_data->mmio = adata->mmio + XLNX_S2MM_OFFSET;
 		adata->capture_stream = substream;
 	}
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -91,6 +91,7 @@ struct xlnx_pcm_drv_data {
 	struct snd_pcm_substream *play_stream;
 	struct snd_pcm_substream *capture_stream;
 	struct platform_device *pdev;
+	struct device_node *nodes[XLNX_MAX_PATHS];
 };
 
 /*
@@ -376,8 +377,8 @@ static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 {
 	int ret;
 	u32 val;
+	size_t pdata_size;
 	struct xlnx_pcm_drv_data *aud_drv_data;
-	struct device_node *nodes[XLNX_MAX_PATHS];
 	struct device *dev = &pdev->dev;
 
 	aud_drv_data = devm_kzalloc(&pdev->dev,
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -40,6 +40,7 @@
 #define XLNX_BYTES_PER_CH	0x44
 
 #define AUD_STS_IOC_IRQ_MASK	BIT(31)
+#define AUD_STS_CH_STS_MASK	BIT(29)
 #define AUD_CTRL_IOC_IRQ_MASK	BIT(13)
 #define AUD_CTRL_DMA_EN_MASK	BIT(0)
 
@@ -144,6 +179,18 @@ struct xlnx_pcm_stream_param {
 	u64 buffer_size;
 };
 
+/**
+ * struct audio_params - audio stream parameters
+ * @srate: sampling rate
+ * @sig_bits: significant bits in container
+ * @channels: number of channels
+ */
+struct audio_params {
+	u32 srate;
+	u32 sig_bits;
+	u32 channels;
+};
+
 enum bit_depth {
 	BIT_DEPTH_8,
 	BIT_DEPTH_16,
@@ -152,6 +199,146 @@ enum bit_depth {
 	BIT_DEPTH_32,
 };
 
+enum {
+	AES_TO_AES,
+	AES_TO_PCM,
+	PCM_TO_PCM,
+	PCM_TO_AES
+};
+
+static int parse_professional_format(u32 chsts_reg1_val, u32 chsts_reg2_val,
+				     struct audio_params *params)
+{
+	u32 padded, val;
+
+	val = (chsts_reg1_val & PROF_SAMPLERATE_MASK) >> PROF_SAMPLERATE_SHIFT;
+	switch (val) {
+	case PROF_SAMPLERATE_44100:
+		params->srate = 44100;
+		break;
+	case PROF_SAMPLERATE_48000:
+		params->srate = 48000;
+		break;
+	case PROF_SAMPLERATE_32000:
+		params->srate = 32000;
+		break;
+	case PROF_SAMPLERATE_UNDEFINED:
+	default:
+		/* not indicated */
+		return -EINVAL;
+	}
+
+	val = (chsts_reg1_val & PROF_CHANNEL_COUNT_MASK) >>
+	       PROF_CHANNEL_COUNT_SHIFT;
+	switch (val) {
+	case PROF_CHANNELS_UNDEFINED:
+	case PROF_STEREO_CHANNELS:
+	case PROF_TWO_CHANNELS:
+		params->channels = 2;
+		break;
+	default:
+		/* TODO: handle more channels in future*/
+		return -EINVAL;
+	}
+
+	val = (chsts_reg1_val & PROF_MAX_BITDEPTH_MASK) >>
+	       PROF_MAX_BITDEPTH_SHIFT;
+	switch (val) {
+	case PROF_MAX_BITDEPTH_UNDEFINED:
+	case PROF_MAX_BITDEPTH_20:
+		padded = 0;
+		break;
+	case PROF_MAX_BITDEPTH_24:
+		padded = 4;
+		break;
+	default:
+		/* user defined values are not supported */
+		return -EINVAL;
+	}
+
+	val = (chsts_reg1_val & PROF_BITDEPTH_MASK) >> PROF_BITDEPTH_SHIFT;
+	switch (val) {
+	case 1:
+		params->sig_bits = 16 + padded;
+		break;
+	case 2:
+		params->sig_bits = 18 + padded;
+		break;
+	case 4:
+		params->sig_bits = 19 + padded;
+		break;
+	case 5:
+		params->sig_bits = 20 + padded;
+		break;
+	case 6:
+		params->sig_bits = 17 + padded;
+		break;
+	case 0:
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int parse_consumer_format(u32 chsts_reg1_val, u32 chsts_reg2_val,
+				 struct audio_params *params)
+{
+	u32 padded, val;
+
+	val = (chsts_reg1_val & CON_SAMPLE_RATE_MASK) >> CON_SAMPLE_RATE_SHIFT;
+	switch (val) {
+	case CON_SAMPLERATE_44100:
+		params->srate = 44100;
+		break;
+	case CON_SAMPLERATE_48000:
+		params->srate = 48000;
+		break;
+	case CON_SAMPLERATE_32000:
+		params->srate = 32000;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	val = (chsts_reg1_val & CON_CHANNEL_COUNT_MASK) >>
+	       CON_CHANNEL_COUNT_SHIFT;
+	params->channels = val;
+
+	/* if not found, set it to default */
+	if (!params->channels)
+		params->channels = 2;
+
+	if (chsts_reg2_val & CON_MAX_BITDEPTH_MASK)
+		padded = 4;
+	else
+		padded = 0;
+
+	val = (chsts_reg2_val & CON_BITDEPTH_MASK) >> CON_BITDEPTH_SHIFT;
+	switch (val) {
+	case 1:
+		params->sig_bits = 16 + padded;
+		break;
+	case 2:
+		params->sig_bits = 18 + padded;
+		break;
+	case 4:
+		params->sig_bits = 19 + padded;
+		break;
+	case 5:
+		params->sig_bits = 20 + padded;
+		break;
+	case 6:
+		params->sig_bits = 17 + padded;
+		break;
+	case 0:
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
 void xlnx_formatter_pcm_reset(void __iomem *mmio_base)
 {
 	u32 val;
@@ -300,15 +487,64 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 					struct snd_pcm_hw_params *params)
 {
 	u32 low, high, active_ch, val, bits_per_sample, bytes_per_ch;
+	u32 aes_reg1_val, aes_reg2_val, sample_rate;
 	int status;
 	u64 size;
+	struct audio_params *aes_params;
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
+	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(component->dev);
+
+	aes_params = kzalloc(sizeof(*aes_params), GFP_KERNEL);
+	if (!aes_params)
+		return -ENOMEM;
 
+	bits_per_sample = params_width(params);
+	sample_rate = params_rate(params);
 	active_ch = params_channels(params);
 	if (active_ch > stream_data->ch_limit)
 		return -EINVAL;
 
+	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
+	    stream_data->xfer_mode == AES_TO_PCM &&
+	    ((strstr(adata->nodes[XLNX_CAPTURE]->name, "hdmi")) ||
+	    (strstr(adata->nodes[XLNX_CAPTURE]->name, "sdi")))) {
+		/*
+		 * If formatter is in AES_PCM mode for HDMI/SDI capture path,
+		 * parse AES header
+		 */
+		val = readl(stream_data->mmio + XLNX_AUD_STS);
+		if (val & AUD_STS_CH_STS_MASK) {
+			aes_reg1_val = readl(stream_data->mmio +
+					 XLNX_AUD_CH_STS_START);
+			aes_reg2_val = readl(stream_data->mmio +
+					 XLNX_AUD_CH_STS_START + 0x4);
+
+			if (aes_reg1_val & AES_FORMAT_MASK)
+				status = parse_professional_format(aes_reg1_val,
+								   aes_reg2_val,
+								   aes_params);
+			else
+				status = parse_consumer_format(aes_reg1_val,
+							       aes_reg2_val,
+							       aes_params);
+
+			if (status) {
+				kfree(aes_params);
+				return status;
+			}
+
+			if (active_ch != aes_params->channels ||
+			    bits_per_sample != aes_params->sig_bits ||
+			    sample_rate != aes_params->srate) {
+				dev_warn(component->dev, "capture parameters mismatch!\n");
+				kfree(aes_params);
+				return -EINVAL;
+			}
+			kfree(aes_params);
+		}
+	}
+
 	size = params_buffer_bytes(params);
 	status = snd_pcm_lib_malloc_pages(substream, size);
 	if (status < 0)
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -355,6 +355,7 @@ static irqreturn_t xlnx_s2mm_irq_handler(int irq, void *arg)
 static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
 			       struct snd_pcm_substream *substream)
 {
+	int err;
 	u32 val, data_format_mode;
 	u32 ch_count_mask, ch_count_shift, data_xfer_mode, data_xfer_shift;
 	struct xlnx_pcm_stream_param *stream_data;
@@ -406,6 +407,15 @@ static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
 	snd_soc_set_runtime_hwparams(substream, &xlnx_pcm_hardware);
 	runtime->private_data = stream_data;
 
+	/* Resize the period size divisible by 64 */
+	err = snd_pcm_hw_constraint_step(runtime, 0,
+					 SNDRV_PCM_HW_PARAM_PERIOD_BYTES, 64);
+	if (err) {
+		dev_err(component->dev,
+			"unable to set constraint on period bytes\n");
+		return err;
+	}
+
 	/* enable interrupt on complete */
 	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
 	val |= AUD_CTRL_IOC_IRQ_MASK;
@@ -460,9 +473,11 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 	int status;
 	u64 size;
 	struct audio_params *aes_params;
+	struct pl_card_data *prv;
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
 	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(component->dev);
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 
 	aes_params = kzalloc(sizeof(*aes_params), GFP_KERNEL);
 	if (!aes_params)
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -128,6 +129,7 @@ struct xlnx_pcm_drv_data {
 	struct snd_pcm_substream *capture_stream;
 	struct platform_device *pdev;
 	struct device_node *nodes[XLNX_MAX_PATHS];
+	struct clk *axi_clk;
 };
 
 /*
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -273,8 +273,11 @@ static int parse_consumer_format(u32 chsts_reg1_val, u32 chsts_reg2_val,
 	       CON_CHANNEL_COUNT_SHIFT;
 	params->channels = val;
 
-	/* if not found, set it to default */
-	if (!params->channels)
+	/*
+	 * if incorrect channel count embedded is less than 2, set it to
+	 * supported default which is 2 in our case
+	 */
+	if (params->channels < 2)
 		params->channels = 2;
 
 	if (chsts_reg2_val & CON_MAX_BITDEPTH_MASK)
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -514,19 +514,9 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 				status = parse_consumer_format(aes_reg1_val,
 							       aes_reg2_val,
 							       aes_params);
-
-			if (status) {
-				kfree(aes_params);
-				return status;
-			}
-
-			if (active_ch != aes_params->channels ||
-			    bits_per_sample != aes_params->sig_bits ||
-			    sample_rate != aes_params->srate) {
-				dev_warn(component->dev, "capture parameters mismatch!\n");
-				kfree(aes_params);
-				return -EINVAL;
-			}
+			dev_info(component->dev, "rate = %d bit depth = %d ch = %d\n",
+				 aes_params->srate, aes_params->sig_bits,
+				 aes_params->channels);
 			kfree(aes_params);
 		}
 	}
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -310,7 +310,7 @@ static int parse_consumer_format(u32 chsts_reg1_val, u32 chsts_reg2_val,
 	return 0;
 }
 
-void xlnx_formatter_pcm_reset(void __iomem *mmio_base)
+static void xlnx_formatter_pcm_reset(void __iomem *mmio_base)
 {
 	u32 val;
 
@@ -442,11 +442,10 @@ static int xlnx_formatter_pcm_close(struct snd_soc_component *component,
 	val &= ~AUD_CTRL_IOC_IRQ_MASK;
 	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
 
-	kfree(stream_data);
-
 	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
 		xlnx_formatter_pcm_reset(stream_data->mmio + XLNX_S2MM_OFFSET);
 
+	kfree(stream_data);
 	return 0;
 }
 
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -43,6 +43,7 @@
 #define AUD_STS_IOC_IRQ_MASK	BIT(31)
 #define AUD_STS_CH_STS_MASK	BIT(29)
 #define AUD_CTRL_IOC_IRQ_MASK	BIT(13)
+#define AUD_CTRL_TOUT_IRQ_MASK	BIT(14)
 #define AUD_CTRL_DMA_EN_MASK	BIT(0)
 
 #define CFG_MM2S_CH_MASK	GENMASK(11, 8)
@@ -310,13 +311,37 @@ static int parse_consumer_format(u32 chsts_reg1_val, u32 chsts_reg2_val,
 	return 0;
 }
 
-static void xlnx_formatter_pcm_reset(void __iomem *mmio_base)
+static int xlnx_formatter_pcm_reset(void __iomem *mmio_base)
 {
-	u32 val;
+	u32 val, retries = 0;
 
 	val = readl(mmio_base + XLNX_AUD_CTRL);
 	val |= AUD_CTRL_RESET_MASK;
 	writel(val, mmio_base + XLNX_AUD_CTRL);
+
+	val = readl(mmio_base + XLNX_AUD_CTRL);
+	/* Poll for maximum timeout of approximately 100ms (1 * 100)*/
+	while ((val & AUD_CTRL_RESET_MASK) && (retries < 100)) {
+		mdelay(1);
+		retries++;
+		val = readl(mmio_base + XLNX_AUD_CTRL);
+	}
+	if (val & AUD_CTRL_RESET_MASK)
+		return -ENODEV;
+
+	return 0;
+}
+
+static void xlnx_formatter_disable_irqs(void __iomem *mmio_base, int stream)
+{
+	u32 val;
+
+	val = readl(mmio_base + XLNX_AUD_CTRL);
+	val &= ~AUD_CTRL_IOC_IRQ_MASK;
+	if (stream == SNDRV_PCM_STREAM_CAPTURE)
+		val &= ~AUD_CTRL_TOUT_IRQ_MASK;
+
+	writel(val, mmio_base + XLNX_AUD_CTRL);
 }
 
 static irqreturn_t xlnx_mm2s_irq_handler(int irq, void *arg)
@@ -421,7 +446,7 @@ static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
 		return err;
 	}
 
-	/* enable interrupt on complete */
+	/* enable DMA IOC irq */
 	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
 	val |= AUD_CTRL_IOC_IRQ_MASK;
 	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
@@ -432,19 +457,18 @@ static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
 static int xlnx_formatter_pcm_close(struct snd_soc_component *component,
 			       struct snd_pcm_substream *substream)
 {
-	u32 val;
-
+	int ret;
 	struct xlnx_pcm_stream_param *stream_data =
 			substream->runtime->private_data;
 
-	/* disable interrupt on complete */
-	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
-	val &= ~AUD_CTRL_IOC_IRQ_MASK;
-	writel(val, stream_data->mmio + XLNX_AUD_CTRL);
-
-	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE)
-		xlnx_formatter_pcm_reset(stream_data->mmio + XLNX_S2MM_OFFSET);
+	ret = xlnx_formatter_pcm_reset(stream_data->mmio);
+	if (ret) {
+		dev_err(component->dev, "audio formatter reset failed\n");
+		goto err_reset;
+	}
+	xlnx_formatter_disable_irqs(stream_data->mmio, substream->stream);
 
+err_reset:
 	kfree(stream_data);
 	return 0;
 }
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -69,40 +70,7 @@
 #define PERIODS_MAX		6
 #define PERIOD_BYTES_MIN	192
 #define PERIOD_BYTES_MAX	(50 * 1024)
-
-/* audio params macros */
-#define PROF_SAMPLERATE_MASK		GENMASK(7, 6)
-#define PROF_SAMPLERATE_SHIFT		6
-#define PROF_CHANNEL_COUNT_MASK		GENMASK(11, 8)
-#define PROF_CHANNEL_COUNT_SHIFT	8
-#define PROF_MAX_BITDEPTH_MASK		GENMASK(18, 16)
-#define PROF_MAX_BITDEPTH_SHIFT		16
-#define PROF_BITDEPTH_MASK		GENMASK(21, 19)
-#define PROF_BITDEPTH_SHIFT		19
-
-#define AES_FORMAT_MASK			BIT(0)
-#define PROF_SAMPLERATE_UNDEFINED	0
-#define PROF_SAMPLERATE_44100		1
-#define PROF_SAMPLERATE_48000		2
-#define PROF_SAMPLERATE_32000		3
-#define PROF_CHANNELS_UNDEFINED		0
-#define PROF_TWO_CHANNELS		8
-#define PROF_STEREO_CHANNELS		2
-#define PROF_MAX_BITDEPTH_UNDEFINED	0
-#define PROF_MAX_BITDEPTH_20		2
-#define PROF_MAX_BITDEPTH_24		4
-
-#define CON_SAMPLE_RATE_MASK		GENMASK(27, 24)
-#define CON_SAMPLE_RATE_SHIFT		24
-#define CON_CHANNEL_COUNT_MASK		GENMASK(23, 20)
-#define CON_CHANNEL_COUNT_SHIFT		20
-#define CON_MAX_BITDEPTH_MASK		BIT(1)
-#define CON_BITDEPTH_MASK		GENMASK(3, 1)
-#define CON_BITDEPTH_SHIFT		0x1
-
-#define CON_SAMPLERATE_44100		0
-#define CON_SAMPLERATE_48000		2
-#define CON_SAMPLERATE_32000		3
+#define XLNX_PARAM_UNKNOWN	0
 
 static const struct snd_pcm_hardware xlnx_pcm_hardware = {
 	.info = SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER |
@@ -151,18 +119,6 @@ struct xlnx_pcm_stream_param {
 	u64 buffer_size;
 };
 
-/**
- * struct audio_params - audio stream parameters
- * @srate: sampling rate
- * @sig_bits: significant bits in container
- * @channels: number of channels
- */
-struct audio_params {
-	u32 srate;
-	u32 sig_bits;
-	u32 channels;
-};
-
 enum bit_depth {
 	BIT_DEPTH_8,
 	BIT_DEPTH_16,
@@ -178,140 +134,120 @@ enum {
 	PCM_TO_AES
 };
 
-static int parse_professional_format(u32 chsts_reg1_val, u32 chsts_reg2_val,
-				     struct audio_params *params)
+static void xlnx_parse_aes_params(u32 chsts_reg1_val, u32 chsts_reg2_val,
+				  struct device *dev)
 {
-	u32 padded, val;
-
-	val = (chsts_reg1_val & PROF_SAMPLERATE_MASK) >> PROF_SAMPLERATE_SHIFT;
-	switch (val) {
-	case PROF_SAMPLERATE_44100:
-		params->srate = 44100;
-		break;
-	case PROF_SAMPLERATE_48000:
-		params->srate = 48000;
-		break;
-	case PROF_SAMPLERATE_32000:
-		params->srate = 32000;
-		break;
-	case PROF_SAMPLERATE_UNDEFINED:
-	default:
-		/* not indicated */
-		return -EINVAL;
-	}
-
-	val = (chsts_reg1_val & PROF_CHANNEL_COUNT_MASK) >>
-	       PROF_CHANNEL_COUNT_SHIFT;
-	switch (val) {
-	case PROF_CHANNELS_UNDEFINED:
-	case PROF_STEREO_CHANNELS:
-	case PROF_TWO_CHANNELS:
-		params->channels = 2;
-		break;
-	default:
-		/* TODO: handle more channels in future*/
-		return -EINVAL;
-	}
-
-	val = (chsts_reg1_val & PROF_MAX_BITDEPTH_MASK) >>
-	       PROF_MAX_BITDEPTH_SHIFT;
-	switch (val) {
-	case PROF_MAX_BITDEPTH_UNDEFINED:
-	case PROF_MAX_BITDEPTH_20:
-		padded = 0;
-		break;
-	case PROF_MAX_BITDEPTH_24:
-		padded = 4;
-		break;
-	default:
-		/* user defined values are not supported */
-		return -EINVAL;
-	}
+	u32 padded, srate, bit_depth, status[2];
+
+	if (chsts_reg1_val & IEC958_AES0_PROFESSIONAL) {
+		status[0] = chsts_reg1_val & 0xff;
+		status[1] = (chsts_reg1_val >> 16) & 0xff;
+
+		switch (status[0] & IEC958_AES0_PRO_FS) {
+		case IEC958_AES0_PRO_FS_44100:
+			srate = 44100;
+			break;
+		case IEC958_AES0_PRO_FS_48000:
+			srate = 48000;
+			break;
+		case IEC958_AES0_PRO_FS_32000:
+			srate = 32000;
+			break;
+		case IEC958_AES0_PRO_FS_NOTID:
+		default:
+			srate = XLNX_PARAM_UNKNOWN;
+			break;
+		}
 
-	val = (chsts_reg1_val & PROF_BITDEPTH_MASK) >> PROF_BITDEPTH_SHIFT;
-	switch (val) {
-	case 1:
-		params->sig_bits = 16 + padded;
-		break;
-	case 2:
-		params->sig_bits = 18 + padded;
-		break;
-	case 4:
-		params->sig_bits = 19 + padded;
-		break;
-	case 5:
-		params->sig_bits = 20 + padded;
-		break;
-	case 6:
-		params->sig_bits = 17 + padded;
-		break;
-	case 0:
-	default:
-		return -EINVAL;
-	}
+		switch (status[1] & IEC958_AES2_PRO_SBITS) {
+		case IEC958_AES2_PRO_WORDLEN_NOTID:
+		case IEC958_AES2_PRO_SBITS_20:
+			padded = 0;
+			break;
+		case IEC958_AES2_PRO_SBITS_24:
+			padded = 4;
+			break;
+		default:
+			bit_depth = XLNX_PARAM_UNKNOWN;
+			goto log_params;
+		}
 
-	return 0;
-}
+		switch (status[1] & IEC958_AES2_PRO_WORDLEN) {
+		case IEC958_AES2_PRO_WORDLEN_20_16:
+			bit_depth = 16 + padded;
+			break;
+		case IEC958_AES2_PRO_WORDLEN_22_18:
+			bit_depth = 18 + padded;
+			break;
+		case IEC958_AES2_PRO_WORDLEN_23_19:
+			bit_depth = 19 + padded;
+			break;
+		case IEC958_AES2_PRO_WORDLEN_24_20:
+			bit_depth = 20 + padded;
+			break;
+		case IEC958_AES2_PRO_WORDLEN_NOTID:
+		default:
+			bit_depth = XLNX_PARAM_UNKNOWN;
+			break;
+		}
 
-static int parse_consumer_format(u32 chsts_reg1_val, u32 chsts_reg2_val,
-				 struct audio_params *params)
-{
-	u32 padded, val;
+	} else {
+		status[0] = (chsts_reg1_val >> 24) & 0xff;
+		status[1] = chsts_reg2_val & 0xff;
+
+		switch (status[0] & IEC958_AES3_CON_FS) {
+		case IEC958_AES3_CON_FS_44100:
+			srate = 44100;
+			break;
+		case IEC958_AES3_CON_FS_48000:
+			srate = 48000;
+			break;
+		case IEC958_AES3_CON_FS_32000:
+			srate = 32000;
+			break;
+		default:
+			srate = XLNX_PARAM_UNKNOWN;
+			break;
+		}
 
-	val = (chsts_reg1_val & CON_SAMPLE_RATE_MASK) >> CON_SAMPLE_RATE_SHIFT;
-	switch (val) {
-	case CON_SAMPLERATE_44100:
-		params->srate = 44100;
-		break;
-	case CON_SAMPLERATE_48000:
-		params->srate = 48000;
-		break;
-	case CON_SAMPLERATE_32000:
-		params->srate = 32000;
-		break;
-	default:
-		return -EINVAL;
+		if (status[1] & IEC958_AES4_CON_MAX_WORDLEN_24)
+			padded = 4;
+		else
+			padded = 0;
+
+		switch (status[1] & IEC958_AES4_CON_WORDLEN) {
+		case IEC958_AES4_CON_WORDLEN_20_16:
+			bit_depth = 16 + padded;
+			break;
+		case IEC958_AES4_CON_WORDLEN_22_18:
+			bit_depth = 18 + padded;
+			break;
+		case IEC958_AES4_CON_WORDLEN_23_19:
+			bit_depth = 19 + padded;
+			break;
+		case IEC958_AES4_CON_WORDLEN_24_20:
+			bit_depth = 20 + padded;
+			break;
+		case IEC958_AES4_CON_WORDLEN_21_17:
+			bit_depth = 17 + padded;
+			break;
+		case IEC958_AES4_CON_WORDLEN_NOTID:
+		default:
+			bit_depth = XLNX_PARAM_UNKNOWN;
+			break;
+		}
 	}
 
-	val = (chsts_reg1_val & CON_CHANNEL_COUNT_MASK) >>
-	       CON_CHANNEL_COUNT_SHIFT;
-	params->channels = val;
-
-	/*
-	 * if incorrect channel count embedded is less than 2, set it to
-	 * supported default which is 2 in our case
-	 */
-	if (params->channels < 2)
-		params->channels = 2;
-
-	if (chsts_reg2_val & CON_MAX_BITDEPTH_MASK)
-		padded = 4;
+log_params:
+	if (srate != XLNX_PARAM_UNKNOWN)
+		dev_info(dev, "sample rate = %d\n", srate);
 	else
-		padded = 0;
+		dev_info(dev, "sample rate = unknown\n");
 
-	val = (chsts_reg2_val & CON_BITDEPTH_MASK) >> CON_BITDEPTH_SHIFT;
-	switch (val) {
-	case 1:
-		params->sig_bits = 16 + padded;
-		break;
-	case 2:
-		params->sig_bits = 18 + padded;
-		break;
-	case 4:
-		params->sig_bits = 19 + padded;
-		break;
-	case 5:
-		params->sig_bits = 20 + padded;
-		break;
-	case 6:
-		params->sig_bits = 17 + padded;
-		break;
-	case 0:
-	default:
-		return -EINVAL;
-	}
-
-	return 0;
+	if (bit_depth != XLNX_PARAM_UNKNOWN)
+		dev_info(dev, "bit_depth = %d\n", bit_depth);
+	else
+		dev_info(dev, "bit_depth = unknown\n");
 }
 
 static int xlnx_formatter_pcm_reset(void __iomem *mmio_base)
@@ -500,17 +436,12 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 	u32 aes_reg1_val, aes_reg2_val, sample_rate;
 	int status;
 	u64 size;
-	struct audio_params *aes_params;
 	struct pl_card_data *prv;
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
 	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(component->dev);
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 
-	aes_params = kzalloc(sizeof(*aes_params), GFP_KERNEL);
-	if (!aes_params)
-		return -ENOMEM;
-
 	bits_per_sample = params_width(params);
 	sample_rate = params_rate(params);
 	active_ch = params_channels(params);
@@ -532,18 +463,8 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 			aes_reg2_val = readl(stream_data->mmio +
 					 XLNX_AUD_CH_STS_START + 0x4);
 
-			if (aes_reg1_val & AES_FORMAT_MASK)
-				status = parse_professional_format(aes_reg1_val,
-								   aes_reg2_val,
-								   aes_params);
-			else
-				status = parse_consumer_format(aes_reg1_val,
-							       aes_reg2_val,
-							       aes_params);
-			dev_info(component->dev, "rate = %d bit depth = %d ch = %d\n",
-				 aes_params->srate, aes_params->sig_bits,
-				 aes_params->channels);
-			kfree(aes_params);
+			xlnx_parse_aes_params(aes_reg1_val, aes_reg2_val,
+					      component->dev);
 		}
 	}
 
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -665,21 +749,19 @@ static int xlnx_formatter_pcm_probe(struct platform_device *pdev)
 	struct xlnx_pcm_drv_data *aud_drv_data;
 	struct device *dev = &pdev->dev;
 
-	aud_drv_data = devm_kzalloc(&pdev->dev,
-				    sizeof(*aud_drv_data), GFP_KERNEL);
+	aud_drv_data = devm_kzalloc(dev, sizeof(*aud_drv_data), GFP_KERNEL);
 	if (!aud_drv_data)
 		return -ENOMEM;
 
-	aud_drv_data->axi_clk = devm_clk_get(&pdev->dev, "s_axi_lite_aclk");
+	aud_drv_data->axi_clk = devm_clk_get(dev, "s_axi_lite_aclk");
 	if (IS_ERR(aud_drv_data->axi_clk)) {
 		ret = PTR_ERR(aud_drv_data->axi_clk);
-		dev_err(&pdev->dev, "failed to get s_axi_lite_aclk(%d)\n", ret);
+		dev_err(dev, "failed to get s_axi_lite_aclk(%d)\n", ret);
 		return ret;
 	}
 	ret = clk_prepare_enable(aud_drv_data->axi_clk);
 	if (ret) {
-		dev_err(&pdev->dev,
-			"failed to enable s_axi_lite_aclk(%d)\n", ret);
+		dev_err(dev, "failed to enable s_axi_lite_aclk(%d)\n", ret);
 		return ret;
 	}
 
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -100,6 +100,9 @@ struct xlnx_pcm_drv_data {
 	struct platform_device *pdev;
 	struct device_node *nodes[XLNX_MAX_PATHS];
 	struct clk *axi_clk;
+	struct clk *mm2s_axis_clk;
+	struct clk *s2mm_axis_clk;
+	struct clk *aud_mclk;
 };
 
 /*
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -458,11 +458,11 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 		 * If formatter is in AES_PCM mode for HDMI/SDI capture path,
 		 * parse AES header
 		 */
-		val = readl(stream_data->mmio + XLNX_AUD_STS);
+		val = ioread32(stream_data->mmio + XLNX_AUD_STS);
 		if (val & AUD_STS_CH_STS_MASK) {
-			aes_reg1_val = readl(stream_data->mmio +
+			aes_reg1_val = ioread32(stream_data->mmio +
 					 XLNX_AUD_CH_STS_START);
-			aes_reg2_val = readl(stream_data->mmio +
+			aes_reg2_val = ioread32(stream_data->mmio +
 					 XLNX_AUD_CH_STS_START + 0x4);
 
 			xlnx_parse_aes_params(aes_reg1_val, aes_reg2_val,
@@ -479,10 +479,10 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 
 	low = lower_32_bits(substream->dma_buffer.addr);
 	high = upper_32_bits(substream->dma_buffer.addr);
-	writel(low, stream_data->mmio + XLNX_AUD_BUFF_ADDR_LSB);
-	writel(high, stream_data->mmio + XLNX_AUD_BUFF_ADDR_MSB);
+	iowrite32(low, stream_data->mmio + XLNX_AUD_BUFF_ADDR_LSB);
+	iowrite32(high, stream_data->mmio + XLNX_AUD_BUFF_ADDR_MSB);
 
-	val = readl(stream_data->mmio + XLNX_AUD_CTRL);
+	val = ioread32(stream_data->mmio + XLNX_AUD_CTRL);
 	val &= ~AUD_CTRL_DATA_WIDTH_MASK;
 	bits_per_sample = params_width(params);
 	switch (bits_per_sample) {
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -449,9 +457,14 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 	struct pl_card_data *prv;
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct xlnx_pcm_stream_param *stream_data = runtime->private_data;
-	struct xlnx_pcm_drv_data *adata = dev_get_drvdata(component->dev);
+	struct xlnx_pcm_drv_data *adata;
 	struct snd_soc_pcm_runtime *rtd = substream->private_data;
 
+	if (!component)
+		return -ENODEV;
+
+	adata = dev_get_drvdata(component->dev);
+
 	bits_per_sample = params_width(params);
 	sample_rate = params_rate(params);
 	active_ch = params_channels(params);
@@ -566,6 +579,9 @@ static int xlnx_formatter_pcm_trigger(struct snd_soc_component *component,
 static int xlnx_formatter_pcm_new(struct snd_soc_component *component,
 					struct snd_soc_pcm_runtime *rtd)
 {
+	if (!component)
+		return -ENODEV;
+
 	snd_pcm_lib_preallocate_pages_for_all(rtd->pcm,
 			SNDRV_DMA_TYPE_DEV, component->dev,
 			xlnx_pcm_hardware.buffer_bytes_max,
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -459,7 +459,6 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 
 	adata = dev_get_drvdata(component->dev);
 
-	bits_per_sample = params_width(params);
 	sample_rate = params_rate(params);
 	active_ch = params_channels(params);
 	if (active_ch > stream_data->ch_limit)
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -445,7 +445,7 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 					struct snd_pcm_hw_params *params)
 {
 	u32 low, high, active_ch, val, bits_per_sample, bytes_per_ch;
-	u32 aes_reg1_val, aes_reg2_val, sample_rate;
+	u32 aes_reg1_val, aes_reg2_val;
 	int status;
 	u64 size;
 	struct pl_card_data *prv;
@@ -459,7 +459,6 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 
 	adata = dev_get_drvdata(component->dev);
 
-	sample_rate = params_rate(params);
 	active_ch = params_channels(params);
 	if (active_ch > stream_data->ch_limit)
 		return -EINVAL;
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -41,6 +41,7 @@
 #define XLNX_AUD_XFER_COUNT	0x28
 #define XLNX_AUD_CH_STS_START	0x2C
 #define XLNX_BYTES_PER_CH	0x44
+#define XLNX_AUD_ALIGN_BYTES	64
 
 #define AUD_STS_IOC_IRQ_MASK	BIT(31)
 #define AUD_STS_CH_STS_MASK	BIT(29)
@@ -386,12 +387,30 @@ static int xlnx_formatter_pcm_open(struct snd_soc_component *component,
 	snd_soc_set_runtime_hwparams(substream, &xlnx_pcm_hardware);
 	runtime->private_data = stream_data;
 
-	/* Resize the period size divisible by 64 */
+	/* Resize the period bytes as divisible by 64 */
 	err = snd_pcm_hw_constraint_step(runtime, 0,
-					 SNDRV_PCM_HW_PARAM_PERIOD_BYTES, 64);
+					 SNDRV_PCM_HW_PARAM_PERIOD_BYTES,
+					 XLNX_AUD_ALIGN_BYTES);
 	if (err) {
 		dev_err(component->dev,
-			"unable to set constraint on period bytes\n");
+			"Unable to set constraint on period bytes\n");
+		return err;
+	}
+	/* Resize the buffer bytes as divisible by 64 */
+	err = snd_pcm_hw_constraint_step(runtime, 0,
+					 SNDRV_PCM_HW_PARAM_BUFFER_BYTES,
+					 XLNX_AUD_ALIGN_BYTES);
+	if (err) {
+		dev_err(component->dev,
+			"Unable to set constraint on buffer bytes\n");
+		return err;
+	}
+	/* Set periods as integer multiple */
+	err = snd_pcm_hw_constraint_integer(runtime,
+					    SNDRV_PCM_HW_PARAM_PERIODS);
+	if (err < 0) {
+		dev_err(component->dev,
+			"Unable to set constraint on periods to be integer\n");
 		return err;
 	}
 
--- sound/soc/xilinx/xlnx_formatter_pcm.c
+++ sound/soc/xilinx/xlnx_formatter_pcm.c
@@ -486,7 +486,8 @@ static int xlnx_formatter_pcm_hw_params(struct snd_soc_component *component,
 	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
 	    stream_data->xfer_mode == AES_TO_PCM &&
 	    ((strstr(adata->nodes[XLNX_CAPTURE]->name, "hdmi")) ||
-	    (strstr(adata->nodes[XLNX_CAPTURE]->name, "sdi")))) {
+	    (strstr(adata->nodes[XLNX_CAPTURE]->name, "sdi")) ||
+	    (strstr(adata->nodes[XLNX_CAPTURE]->name, "dp")))) {
 		/*
 		 * If formatter is in AES_PCM mode for HDMI/SDI capture path,
 		 * parse AES header
